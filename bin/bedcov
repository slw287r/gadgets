#!/bin/bash

function usage {
	echo -e "\nProgram: $(basename $0) (Probe coverage of primary target regions)
Version: 0.2.0
Created: 14/9/2014

Modified:
  11/07/2017 Fix wrong output when no overlap found
  06/01/2015 Use system sort instead of bedtools sort
  04/01/2015 Optimize mem usage by creating temporary files
  25/11/2014 Fix greater than 100% coverage caused by unmerged capture targets
  25/09/2014 Add empty file check
             Fix none covered targets
  28/09/2014 Add UnTiled and UnCovered regions
             Add bedtools availability check
  08/10/2014 Output path is now in accord with primary target regions file

Contact: liujc@geneplus.org.cn

Usage:   \033[1;31m$(basename $0)\033[0;0m \033[34m<capture_targets.bed> <primary_region.bed>\033[0m \033[2;37m[prefix]\033[0;0m

Output:  capture_targets\033[2;37m_prefix\033[0;0m.cov
         PrimaryTarget...  TiledRatio  UnTiled  PaddedRatio  UnPadded\n"
	exit
}

#check bedtools availability
if [ ! $(which bedtools) ];then
	echo -e "\n\033[32m***************************************\n*bedtools availability checking failed*\n***************************************\033[0m"
	echo -e "\nbedtools is required to run this tool
  https://github.com/arq5x/bedtools2/releases
Please install it and make sure they are within the search path"
	usage
fi

if [ $# -lt 2 ];then
	echo -e "\n\033[32m***************************\n*Parameter checking failed*\n***************************\033[0m"
	usage
fi

if [ ! -f "$1" -o ! -f "$2" ];then
	echo -e "\n\033[32m***********************\n*Input checking failed*\n***********************\033[0m"
	usage
fi

if [ $(awk 'length($0)>0' $2 | wc -l) -eq 0 ];then
	echo -e "\n\033[32m*************************\n*primary target is empty*\n*************************\033[0m"
	usage
fi

#check query column number
cn=$(head -n 1 $2 | awk -F'\t' '{print NF}')

prefix="";
if [ $# -eq 3 ];then
	prefix="_"$3
fi

outdir=$(dirname $2)
pref=${2##*/};pref=${pref%.*}

#create random string
rs=$(head -c 10 /dev/urandom | base64 | tr -d '[=/]');
sort -k1,1 -k2,2n -S75% $1 -o .${rs}.sort0
bedtools merge -i .${rs}.sort0 > .${rs}.part0
rm .${rs}.sort0
ok=$(bedtools window -a $2 -b .${rs}.part0 -w 0 | wc -l)
if [ $ok -ne 0 ]; then
	bedtools window -a $2 -b .${rs}.part0 -w 0 | sort -u | bedtools overlap -i stdin -cols 2,3,$(($cn+2)),$(($cn+3)) | cut -f1-$cn,$(($cn+4)) | awk -F'\t' -v n=$cn 'BEGIN{OFS="\t"}NR==FNR{k=$1;for(i=2;i<=n;i++){k=k"\t"$i};a[k]+=$(n+1);next}{if($0 in a){print $0,sprintf("%.3f",a[$0]/(($3-$2)>1?($3-$2):1)*100)}else{print $0,"0"}}' - $2 > .${rs}.part1
else
	awk 'BEGIN{OFS="\t"}{print $0,"0"}' $2 > .${rs}.part1
fi

ok=$(bedtools subtract -a $2 -b .${rs}.part0 | wc -l | awk '{print $1}');
if [ $ok -ne 0 ];then
	bedtools subtract -a $2 -b .${rs}.part0 | bedtools sort -i - | bedtools merge -i - | bedtools intersect -a $2 -b - -wa -wb | sort -u | awk -F'\t' -v n=$cn 'BEGIN{OFS="\t"}NR==FNR{k=$1;for(i=2;i<=n;i++){k=k"\t"$i};if(k in a){a[k]=a[k]";"$(n+1)":"$(n+2)"-"$(n+3);next}else{a[k]=$(n+1)":"$(n+2)"-"$(n+3);next}}{if($0 in a){print a[$0]}else{print "-"}}' - $2 > .${rs}.part2
else
	awk '{print "-"}' $2 > .${rs}.part2
fi

ok=$(awk 'BEGIN{OFS="\t"}{print $1,($2-100<=0)?0:$2-100,$3+100}' .${rs}.part0 | bedtools sort -i - | bedtools merge -i - | bedtools window -a $2 -b - -w 0 | wc -l)
if [ $ok -ne 0 ]; then
	awk 'BEGIN{OFS="\t"}{print $1,($2-100<=0)?0:$2-100,$3+100}' .${rs}.part0 | bedtools sort -i - | bedtools merge -i - | bedtools window -a $2 -b - -w 0 | sort -u | bedtools overlap -i stdin -cols 2,3,$(($cn+2)),$(($cn+3)) | cut -f1-$cn,$(($cn+4)) | awk -F'\t' -v n=$cn 'BEGIN{OFS="\t"}NR==FNR{k=$1;for(i=2;i<=n;i++){k=k"\t"$i};a[k]+=$(n+1);next}{if($0 in a){print sprintf("%.3f",a[$0]/(($3-$2)>1?($3-$2):1)*100)}else{print "0"}}' - $2 > .${rs}.part3
else
	echo 0 > .${rs}.part3
fi


ok=$(awk 'BEGIN{OFS="\t"}{print $1,(($2-100)<0)?0:($2-100),$3+100}' .${rs}.part0 | bedtools subtract -a $2 -b - | wc -l | awk '{print $1}');
if [ $ok -ne 0 ];then
	awk 'BEGIN{OFS="\t"}{print $1,(($2-100)<0)?0:($2-100),$3+100}' .${rs}.part0 | bedtools subtract -a $2 -b - | bedtools sort -i - | bedtools merge -i - | bedtools intersect -a $2 -b - -wa -wb | sort -u | awk -F'\t' -v n=$cn 'BEGIN{OFS="\t"}NR==FNR{k=$1;for(i=2;i<=n;i++){k=k"\t"$i};if(k in a){a[k]=a[k]";"$(n+1)":"$(n+2)"-"$(n+3);next}else{a[k]=$(n+1)":"$(n+2)"-"$(n+3);next}}{if($0 in a){print a[$0]}else{print "-"}}' - $2 > .${rs}.part4
else
	awk '{print "-"}' $2 > .${rs}.part4
fi

paste .${rs}.part1 .${rs}.part2 .${rs}.part3 .${rs}.part4 > ${outdir}/${pref}${prefix}.cov
#rm .${rs}.part{1,2,3,4}

#coverage
#primary target size
ps=$(bedtools sort -i $2 | bedtools merge -i - | awk 'BEGIN{a=0}{a+=$3-$2}END{print a}')
cs=$(bedtools intersect -a .${rs}.part0 -b $2 | bedtools sort -i - | bedtools merge -i - | awk 'BEGIN{a=0}{a+=$3-$2}END{print a}')
fs=$(awk 'BEGIN{OFS="\t"}{print $1,(($2-100)<1)?0:($2-100),$3+100}' .${rs}.part0 | bedtools sort -i - | bedtools merge -i - | bedtools intersect -a - -b $2 | bedtools sort -i - | bedtools merge -i - | awk 'BEGIN{a=0}{a+=$3-$2}END{print a}')
echo -e "Target\t${ps}"
echo -e "Tiled\t${cs}\t$(echo "scale=3;$cs/$ps*100"|bc)%"
echo -e "Padded\t${fs}\t$(echo "scale=3;$fs/$ps*100"|bc)%"
rm .${rs}.part0
exit
